<?xml version="1.0"?>

<launch>

  <!-- sim time for convenience, if playing a rosbag -->
  <!-- <arg name="use_sim_time"            default="true"/>
  <param if="$(arg use_sim_time)" name="use_sim_time" value="true"/> -->

  <!-- Choose visualization -->
  <arg name="rtabmap_viz" default="true" />

  <arg name="approx_sync"       default="false"/> 

  <!-- Queue size for rtabmap_slam -->
  <arg name="queue_size" default="30"/>

  <arg name="args"       default="--delete_db_on_start"/>

  <!-- Params specially for rtabmap_viz -->
  <arg name="camera" default="true" />
  <arg name="clear_params"            default="true"/>
  <arg name="gui_cfg"                 default="~/.ros/rtabmap_gui.ini" />
  <arg name="wait_for_transform"      default="0.2"/>
  <!-- Example with camera or not -->
  <arg name="output"                  default="screen"/>        <!-- Control node output (screen or log) -->
  <arg name="gdb"                     default="false"/>         <!-- Launch nodes in gdb for debugging (apt install xterm gdb) -->
  <arg     if="$(arg gdb)" name="launch_prefix" default="xterm -e gdb -q -ex run --args"/>
  <arg unless="$(arg gdb)" name="launch_prefix" default=""/>

  <group ns="rtabmap">

    <node pkg="nodelet" type="nodelet" name="rgbd_sync" args="standalone rtabmap_sync/rgbd_sync" output="screen">
      <remap from="rgb/image"       to="/camera/color/image_raw"/>
      <remap from="depth/image"     to="/camera/depth/image_rect_raw"/>
      <remap from="rgb/camera_info" to="/camera/color/camera_info"/>
      <remap from="rgbd_image"      to="rgbd_image"/> <!-- output -->
      
      <!-- Should be true for not synchronized camera topics 
           (e.g., false for kinectv2, zed, realsense, true for xtion, kinect360)-->
      <param name="approx_sync"       value="$(arg approx_sync)"/> 
    </node>

    <node name="rtabmap" pkg="rtabmap_slam" type="rtabmap" output="screen" args="--delete_db_on_start">
          <param name="frame_id" type="string" value="base_link"/>

          <param name="subscribe_rgb"   type="bool" value="false"/>
          <param name="subscribe_depth" type="bool" value="false"/>
          <param name="subscribe_rgbd" type="bool" value="true"/>

          <!-- This is the input odom topic, rtabmap will read odom from this topic -->
          <remap from="odom" to="/RosAria/pose"/>

          <remap from="rgbd_image" to="rgbd_image"/>

          <param name="queue_size" type="int" value="$(arg queue_size)"/>

          <!-- RTAB-Map's parameters -->
          <param name="RGBD/AngularUpdate"        type="string" value="0.01"/>
          <param name="RGBD/LinearUpdate"         type="string" value="0.01"/>
          <param name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/>
    </node>

    <!-- Visualisation RTAB-Map -->
    <!-- <node if="$(arg rtabmap_viz)" pkg="rtabmap_viz" type="rtabmap_viz" name="rtabmap_viz" args="-d $(find rtabmap_demos)/launch/config/rgbd_gui.ini" output="screen">
      <param name="subscribe_rgbd"      type="bool" value="$(arg camera)"/>
      <param name="frame_id"            type="string" value="base_link"/>
    </node> -->

    <node if="$(arg rtabmap_viz)" pkg="rtabmap_viz" type="rtabmap_viz" name="rtabmap_viz" args="-d $(arg gui_cfg)" clear_params="$(arg clear_params)" output="$(arg output)" launch-prefix="$(arg launch_prefix)">
      <param name="subscribe_rgbd"       type="bool"   value="true"/>
      <param name="frame_id"             type="string" value="camera_link"/>

      <param name="wait_for_transform_duration" type="double"   value="$(arg wait_for_transform)"/>
      <param name="queue_size"           type="int"    value="$(arg queue_size)"/>
      <param name="approx_sync"          type="bool"   value="$(arg approx_sync)"/>

      <remap from="rgb/image"       to="/camera/color/image_raw"/>
      <remap from="depth/image"     to="/camera/depth/image_rect_raw"/>
      <remap from="rgb/camera_info" to="/camera/color/camera_info"/>
      <remap from="rgbd_image"      to="odom_rgbd_image"/>

      <remap from="odom" to="/RosAria/pose"/>
    </node>

  </group>

</launch>